package com.peploleum.insight.service;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import io.github.jhipster.service.QueryService;

import com.peploleum.insight.domain.Malware;
import com.peploleum.insight.domain.*; // for static metamodels
import com.peploleum.insight.repository.MalwareRepository;
import com.peploleum.insight.repository.search.MalwareSearchRepository;
import com.peploleum.insight.service.dto.MalwareCriteria;

import com.peploleum.insight.service.dto.MalwareDTO;
import com.peploleum.insight.service.mapper.MalwareMapper;

/**
 * Service for executing complex queries for Malware entities in the database.
 * The main input is a {@link MalwareCriteria} which gets converted to {@link Specification},
 * in a way that all the filters must apply.
 * It returns a {@link List} of {@link MalwareDTO} or a {@link Page} of {@link MalwareDTO} which fulfills the criteria.
 */
@Service
@Transactional(readOnly = true)
public class MalwareQueryService extends QueryService<Malware> {

    private final Logger log = LoggerFactory.getLogger(MalwareQueryService.class);

    private final MalwareRepository malwareRepository;

    private final MalwareMapper malwareMapper;

    private final MalwareSearchRepository malwareSearchRepository;

    public MalwareQueryService(MalwareRepository malwareRepository, MalwareMapper malwareMapper, MalwareSearchRepository malwareSearchRepository) {
        this.malwareRepository = malwareRepository;
        this.malwareMapper = malwareMapper;
        this.malwareSearchRepository = malwareSearchRepository;
    }

    /**
     * Return a {@link List} of {@link MalwareDTO} which matches the criteria from the database
     * @param criteria The object which holds all the filters, which the entities should match.
     * @return the matching entities.
     */
    @Transactional(readOnly = true)
    public List<MalwareDTO> findByCriteria(MalwareCriteria criteria) {
        log.debug("find by criteria : {}", criteria);
        final Specification<Malware> specification = createSpecification(criteria);
        return malwareMapper.toDto(malwareRepository.findAll(specification));
    }

    /**
     * Return a {@link Page} of {@link MalwareDTO} which matches the criteria from the database
     * @param criteria The object which holds all the filters, which the entities should match.
     * @param page The page, which should be returned.
     * @return the matching entities.
     */
    @Transactional(readOnly = true)
    public Page<MalwareDTO> findByCriteria(MalwareCriteria criteria, Pageable page) {
        log.debug("find by criteria : {}, page: {}", criteria, page);
        final Specification<Malware> specification = createSpecification(criteria);
        return malwareRepository.findAll(specification, page)
            .map(malwareMapper::toDto);
    }

    /**
     * Function to convert MalwareCriteria to a {@link Specification}
     */
    private Specification<Malware> createSpecification(MalwareCriteria criteria) {
        Specification<Malware> specification = Specification.where(null);
        if (criteria != null) {
            if (criteria.getId() != null) {
                specification = specification.and(buildSpecification(criteria.getId(), Malware_.id));
            }
            if (criteria.getDescription() != null) {
                specification = specification.and(buildStringSpecification(criteria.getDescription(), Malware_.description));
            }
            if (criteria.getNom() != null) {
                specification = specification.and(buildStringSpecification(criteria.getNom(), Malware_.nom));
            }
            if (criteria.getType() != null) {
                specification = specification.and(buildStringSpecification(criteria.getType(), Malware_.type));
            }
            if (criteria.getLibelle() != null) {
                specification = specification.and(buildStringSpecification(criteria.getLibelle(), Malware_.libelle));
            }
            if (criteria.getIsVariantOfId() != null) {
                specification = specification.and(buildReferringEntitySpecification(criteria.getIsVariantOfId(), Malware_.isVariantOfs, Malware_.id));
            }
            if (criteria.getUsesMalwareToThreatActorId() != null) {
                specification = specification.and(buildReferringEntitySpecification(criteria.getUsesMalwareToThreatActorId(), Malware_.usesMalwareToThreatActors, ThreatActor_.id));
            }
            if (criteria.getUsesMalwareToToolId() != null) {
                specification = specification.and(buildReferringEntitySpecification(criteria.getUsesMalwareToToolId(), Malware_.usesMalwareToTools, Tool_.id));
            }
            if (criteria.getIsUsesMalwareToAttackPatternId() != null) {
                specification = specification.and(buildReferringEntitySpecification(criteria.getIsUsesMalwareToAttackPatternId(), Malware_.isUsesMalwareToAttackPattern, AttackPattern_.id));
            }
            if (criteria.getIsTargetsMalwareToActorId() != null) {
                specification = specification.and(buildReferringEntitySpecification(criteria.getIsTargetsMalwareToActorId(), Malware_.isTargetsMalwareToActor, Actor_.id));
            }
            if (criteria.getVariantOfId() != null) {
                specification = specification.and(buildReferringEntitySpecification(criteria.getVariantOfId(), Malware_.variantOf, Malware_.id));
            }
            if (criteria.getLinkOfId() != null) {
                specification = specification.and(buildReferringEntitySpecification(criteria.getLinkOfId(), Malware_.linkOf, NetLink_.id));
            }
        }
        return specification;
    }

}

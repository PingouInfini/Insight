package com.peploleum.insight.service;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import io.github.jhipster.service.QueryService;

import com.peploleum.insight.domain.Vulnerability;
import com.peploleum.insight.domain.*; // for static metamodels
import com.peploleum.insight.repository.VulnerabilityRepository;
import com.peploleum.insight.repository.search.VulnerabilitySearchRepository;
import com.peploleum.insight.service.dto.VulnerabilityCriteria;

import com.peploleum.insight.service.dto.VulnerabilityDTO;
import com.peploleum.insight.service.mapper.VulnerabilityMapper;

/**
 * Service for executing complex queries for Vulnerability entities in the database.
 * The main input is a {@link VulnerabilityCriteria} which gets converted to {@link Specification},
 * in a way that all the filters must apply.
 * It returns a {@link List} of {@link VulnerabilityDTO} or a {@link Page} of {@link VulnerabilityDTO} which fulfills the criteria.
 */
@Service
@Transactional(readOnly = true)
public class VulnerabilityQueryService extends QueryService<Vulnerability> {

    private final Logger log = LoggerFactory.getLogger(VulnerabilityQueryService.class);

    private final VulnerabilityRepository vulnerabilityRepository;

    private final VulnerabilityMapper vulnerabilityMapper;

    private final VulnerabilitySearchRepository vulnerabilitySearchRepository;

    public VulnerabilityQueryService(VulnerabilityRepository vulnerabilityRepository, VulnerabilityMapper vulnerabilityMapper, VulnerabilitySearchRepository vulnerabilitySearchRepository) {
        this.vulnerabilityRepository = vulnerabilityRepository;
        this.vulnerabilityMapper = vulnerabilityMapper;
        this.vulnerabilitySearchRepository = vulnerabilitySearchRepository;
    }

    /**
     * Return a {@link List} of {@link VulnerabilityDTO} which matches the criteria from the database
     * @param criteria The object which holds all the filters, which the entities should match.
     * @return the matching entities.
     */
    @Transactional(readOnly = true)
    public List<VulnerabilityDTO> findByCriteria(VulnerabilityCriteria criteria) {
        log.debug("find by criteria : {}", criteria);
        final Specification<Vulnerability> specification = createSpecification(criteria);
        return vulnerabilityMapper.toDto(vulnerabilityRepository.findAll(specification));
    }

    /**
     * Return a {@link Page} of {@link VulnerabilityDTO} which matches the criteria from the database
     * @param criteria The object which holds all the filters, which the entities should match.
     * @param page The page, which should be returned.
     * @return the matching entities.
     */
    @Transactional(readOnly = true)
    public Page<VulnerabilityDTO> findByCriteria(VulnerabilityCriteria criteria, Pageable page) {
        log.debug("find by criteria : {}, page: {}", criteria, page);
        final Specification<Vulnerability> specification = createSpecification(criteria);
        return vulnerabilityRepository.findAll(specification, page)
            .map(vulnerabilityMapper::toDto);
    }

    /**
     * Function to convert VulnerabilityCriteria to a {@link Specification}
     */
    private Specification<Vulnerability> createSpecification(VulnerabilityCriteria criteria) {
        Specification<Vulnerability> specification = Specification.where(null);
        if (criteria != null) {
            if (criteria.getId() != null) {
                specification = specification.and(buildSpecification(criteria.getId(), Vulnerability_.id));
            }
            if (criteria.getNom() != null) {
                specification = specification.and(buildStringSpecification(criteria.getNom(), Vulnerability_.nom));
            }
            if (criteria.getType() != null) {
                specification = specification.and(buildStringSpecification(criteria.getType(), Vulnerability_.type));
            }
            if (criteria.getDescription() != null) {
                specification = specification.and(buildStringSpecification(criteria.getDescription(), Vulnerability_.description));
            }
            if (criteria.getReferenceExterne() != null) {
                specification = specification.and(buildStringSpecification(criteria.getReferenceExterne(), Vulnerability_.referenceExterne));
            }
            if (criteria.getLinkOfId() != null) {
                specification = specification.and(buildReferringEntitySpecification(criteria.getLinkOfId(), Vulnerability_.linkOf, NetLink_.id));
            }
            if (criteria.getTargetsVulnerabilityToThreatActorId() != null) {
                specification = specification.and(buildReferringEntitySpecification(criteria.getTargetsVulnerabilityToThreatActorId(), Vulnerability_.targetsVulnerabilityToThreatActor, ThreatActor_.id));
            }
            if (criteria.getTargetsVulnerabilityToToolId() != null) {
                specification = specification.and(buildReferringEntitySpecification(criteria.getTargetsVulnerabilityToToolId(), Vulnerability_.targetsVulnerabilityToTool, Tool_.id));
            }
        }
        return specification;
    }

}

package com.peploleum.insight.service.mapper;

import com.peploleum.insight.domain.*;
import com.peploleum.insight.service.dto.MalwareDTO;

import org.mapstruct.*;

/**
 * Mapper for the entity Malware and its DTO MalwareDTO.
 */
@Mapper(componentModel = "spring", uses = {AttackPatternMapper.class, ActorMapper.class, NetLinkMapper.class})
public interface MalwareMapper extends EntityMapper<MalwareDTO, Malware> {

    @Mapping(source = "isUsesMalwareToAttackPattern.id", target = "isUsesMalwareToAttackPatternId")
    @Mapping(source = "isUsesMalwareToAttackPattern.nom", target = "isUsesMalwareToAttackPatternNom")
    @Mapping(source = "isTargetsMalwareToActor.id", target = "isTargetsMalwareToActorId")
    @Mapping(source = "isTargetsMalwareToActor.nom", target = "isTargetsMalwareToActorNom")
    @Mapping(source = "variantOf.id", target = "variantOfId")
    @Mapping(source = "variantOf.nom", target = "variantOfNom")
    @Mapping(source = "linkOf.id", target = "linkOfId")
    @Mapping(source = "linkOf.nom", target = "linkOfNom")
    MalwareDTO toDto(Malware malware);

    @Mapping(target = "isVariantOfs", ignore = true)
    @Mapping(target = "usesMalwareToThreatActors", ignore = true)
    @Mapping(target = "usesMalwareToTools", ignore = true)
    @Mapping(source = "isUsesMalwareToAttackPatternId", target = "isUsesMalwareToAttackPattern")
    @Mapping(source = "isTargetsMalwareToActorId", target = "isTargetsMalwareToActor")
    @Mapping(source = "variantOfId", target = "variantOf")
    @Mapping(source = "linkOfId", target = "linkOf")
    Malware toEntity(MalwareDTO malwareDTO);

    default Malware fromId(Long id) {
        if (id == null) {
            return null;
        }
        Malware malware = new Malware();
        malware.setId(id);
        return malware;
    }
}

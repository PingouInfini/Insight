package com.peploleum.insight.service.mapper;

import com.peploleum.insight.domain.*;
import com.peploleum.insight.service.dto.VulnerabilityDTO;

import org.mapstruct.*;

/**
 * Mapper for the entity Vulnerability and its DTO VulnerabilityDTO.
 */
@Mapper(componentModel = "spring", uses = {NetLinkMapper.class, ThreatActorMapper.class, ToolMapper.class})
public interface VulnerabilityMapper extends EntityMapper<VulnerabilityDTO, Vulnerability> {

    @Mapping(source = "linkOf.id", target = "linkOfId")
    @Mapping(source = "linkOf.nom", target = "linkOfNom")
    @Mapping(source = "targetsVulnerabilityToThreatActor.id", target = "targetsVulnerabilityToThreatActorId")
    @Mapping(source = "targetsVulnerabilityToThreatActor.nom", target = "targetsVulnerabilityToThreatActorNom")
    @Mapping(source = "targetsVulnerabilityToTool.id", target = "targetsVulnerabilityToToolId")
    @Mapping(source = "targetsVulnerabilityToTool.nom", target = "targetsVulnerabilityToToolNom")
    VulnerabilityDTO toDto(Vulnerability vulnerability);

    @Mapping(source = "linkOfId", target = "linkOf")
    @Mapping(source = "targetsVulnerabilityToThreatActorId", target = "targetsVulnerabilityToThreatActor")
    @Mapping(source = "targetsVulnerabilityToToolId", target = "targetsVulnerabilityToTool")
    Vulnerability toEntity(VulnerabilityDTO vulnerabilityDTO);

    default Vulnerability fromId(Long id) {
        if (id == null) {
            return null;
        }
        Vulnerability vulnerability = new Vulnerability();
        vulnerability.setId(id);
        return vulnerability;
    }
}

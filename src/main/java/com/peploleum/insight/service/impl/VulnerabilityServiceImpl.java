package com.peploleum.insight.service.impl;

import com.peploleum.insight.service.VulnerabilityService;
import com.peploleum.insight.domain.Vulnerability;
import com.peploleum.insight.repository.VulnerabilityRepository;
import com.peploleum.insight.repository.search.VulnerabilitySearchRepository;
import com.peploleum.insight.service.dto.VulnerabilityDTO;
import com.peploleum.insight.service.mapper.VulnerabilityMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;


import java.util.Optional;

import static org.elasticsearch.index.query.QueryBuilders.*;

/**
 * Service Implementation for managing Vulnerability.
 */
@Service
@Transactional
public class VulnerabilityServiceImpl implements VulnerabilityService {

    private final Logger log = LoggerFactory.getLogger(VulnerabilityServiceImpl.class);

    private final VulnerabilityRepository vulnerabilityRepository;

    private final VulnerabilityMapper vulnerabilityMapper;

    private final VulnerabilitySearchRepository vulnerabilitySearchRepository;

    public VulnerabilityServiceImpl(VulnerabilityRepository vulnerabilityRepository, VulnerabilityMapper vulnerabilityMapper, VulnerabilitySearchRepository vulnerabilitySearchRepository) {
        this.vulnerabilityRepository = vulnerabilityRepository;
        this.vulnerabilityMapper = vulnerabilityMapper;
        this.vulnerabilitySearchRepository = vulnerabilitySearchRepository;
    }

    /**
     * Save a vulnerability.
     *
     * @param vulnerabilityDTO the entity to save
     * @return the persisted entity
     */
    @Override
    public VulnerabilityDTO save(VulnerabilityDTO vulnerabilityDTO) {
        log.debug("Request to save Vulnerability : {}", vulnerabilityDTO);
        Vulnerability vulnerability = vulnerabilityMapper.toEntity(vulnerabilityDTO);
        vulnerability = vulnerabilityRepository.save(vulnerability);
        VulnerabilityDTO result = vulnerabilityMapper.toDto(vulnerability);
        vulnerabilitySearchRepository.save(vulnerability);
        return result;
    }

    /**
     * Get all the vulnerabilities.
     *
     * @param pageable the pagination information
     * @return the list of entities
     */
    @Override
    @Transactional(readOnly = true)
    public Page<VulnerabilityDTO> findAll(Pageable pageable) {
        log.debug("Request to get all Vulnerabilities");
        return vulnerabilityRepository.findAll(pageable)
            .map(vulnerabilityMapper::toDto);
    }


    /**
     * Get one vulnerability by id.
     *
     * @param id the id of the entity
     * @return the entity
     */
    @Override
    @Transactional(readOnly = true)
    public Optional<VulnerabilityDTO> findOne(Long id) {
        log.debug("Request to get Vulnerability : {}", id);
        return vulnerabilityRepository.findById(id)
            .map(vulnerabilityMapper::toDto);
    }

    /**
     * Delete the vulnerability by id.
     *
     * @param id the id of the entity
     */
    @Override
    public void delete(Long id) {
        log.debug("Request to delete Vulnerability : {}", id);
        vulnerabilityRepository.deleteById(id);
        vulnerabilitySearchRepository.deleteById(id);
    }

    /**
     * Search for the vulnerability corresponding to the query.
     *
     * @param query the query of the search
     * @param pageable the pagination information
     * @return the list of entities
     */
    @Override
    @Transactional(readOnly = true)
    public Page<VulnerabilityDTO> search(String query, Pageable pageable) {
        log.debug("Request to search for a page of Vulnerabilities for query {}", query);
        return vulnerabilitySearchRepository.search(queryStringQuery(query), pageable)
            .map(vulnerabilityMapper::toDto);
    }
}

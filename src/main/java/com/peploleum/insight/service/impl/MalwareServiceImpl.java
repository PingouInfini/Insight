package com.peploleum.insight.service.impl;

import com.peploleum.insight.service.MalwareService;
import com.peploleum.insight.domain.Malware;
import com.peploleum.insight.repository.MalwareRepository;
import com.peploleum.insight.repository.search.MalwareSearchRepository;
import com.peploleum.insight.service.dto.MalwareDTO;
import com.peploleum.insight.service.mapper.MalwareMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;


import java.util.Optional;

import static org.elasticsearch.index.query.QueryBuilders.*;

/**
 * Service Implementation for managing Malware.
 */
@Service
@Transactional
public class MalwareServiceImpl implements MalwareService {

    private final Logger log = LoggerFactory.getLogger(MalwareServiceImpl.class);

    private final MalwareRepository malwareRepository;

    private final MalwareMapper malwareMapper;

    private final MalwareSearchRepository malwareSearchRepository;

    public MalwareServiceImpl(MalwareRepository malwareRepository, MalwareMapper malwareMapper, MalwareSearchRepository malwareSearchRepository) {
        this.malwareRepository = malwareRepository;
        this.malwareMapper = malwareMapper;
        this.malwareSearchRepository = malwareSearchRepository;
    }

    /**
     * Save a malware.
     *
     * @param malwareDTO the entity to save
     * @return the persisted entity
     */
    @Override
    public MalwareDTO save(MalwareDTO malwareDTO) {
        log.debug("Request to save Malware : {}", malwareDTO);
        Malware malware = malwareMapper.toEntity(malwareDTO);
        malware = malwareRepository.save(malware);
        MalwareDTO result = malwareMapper.toDto(malware);
        malwareSearchRepository.save(malware);
        return result;
    }

    /**
     * Get all the malwares.
     *
     * @param pageable the pagination information
     * @return the list of entities
     */
    @Override
    @Transactional(readOnly = true)
    public Page<MalwareDTO> findAll(Pageable pageable) {
        log.debug("Request to get all Malwares");
        return malwareRepository.findAll(pageable)
            .map(malwareMapper::toDto);
    }


    /**
     * Get one malware by id.
     *
     * @param id the id of the entity
     * @return the entity
     */
    @Override
    @Transactional(readOnly = true)
    public Optional<MalwareDTO> findOne(Long id) {
        log.debug("Request to get Malware : {}", id);
        return malwareRepository.findById(id)
            .map(malwareMapper::toDto);
    }

    /**
     * Delete the malware by id.
     *
     * @param id the id of the entity
     */
    @Override
    public void delete(Long id) {
        log.debug("Request to delete Malware : {}", id);
        malwareRepository.deleteById(id);
        malwareSearchRepository.deleteById(id);
    }

    /**
     * Search for the malware corresponding to the query.
     *
     * @param query the query of the search
     * @param pageable the pagination information
     * @return the list of entities
     */
    @Override
    @Transactional(readOnly = true)
    public Page<MalwareDTO> search(String query, Pageable pageable) {
        log.debug("Request to search for a page of Malwares for query {}", query);
        return malwareSearchRepository.search(queryStringQuery(query), pageable)
            .map(malwareMapper::toDto);
    }
}

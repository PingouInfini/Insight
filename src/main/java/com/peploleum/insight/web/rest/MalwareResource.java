package com.peploleum.insight.web.rest;

import com.codahale.metrics.annotation.Timed;
import com.peploleum.insight.service.MalwareService;
import com.peploleum.insight.web.rest.errors.BadRequestAlertException;
import com.peploleum.insight.web.rest.util.HeaderUtil;
import com.peploleum.insight.web.rest.util.PaginationUtil;
import com.peploleum.insight.service.dto.MalwareDTO;
import com.peploleum.insight.service.dto.MalwareCriteria;
import com.peploleum.insight.service.MalwareQueryService;
import io.github.jhipster.web.util.ResponseUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.net.URI;
import java.net.URISyntaxException;

import java.util.List;
import java.util.Optional;
import java.util.stream.StreamSupport;

import static org.elasticsearch.index.query.QueryBuilders.*;

/**
 * REST controller for managing Malware.
 */
@RestController
@RequestMapping("/api")
public class MalwareResource {

    private final Logger log = LoggerFactory.getLogger(MalwareResource.class);

    private static final String ENTITY_NAME = "malware";

    private final MalwareService malwareService;

    private final MalwareQueryService malwareQueryService;

    public MalwareResource(MalwareService malwareService, MalwareQueryService malwareQueryService) {
        this.malwareService = malwareService;
        this.malwareQueryService = malwareQueryService;
    }

    /**
     * POST  /malwares : Create a new malware.
     *
     * @param malwareDTO the malwareDTO to create
     * @return the ResponseEntity with status 201 (Created) and with body the new malwareDTO, or with status 400 (Bad Request) if the malware has already an ID
     * @throws URISyntaxException if the Location URI syntax is incorrect
     */
    @PostMapping("/malwares")
    @Timed
    public ResponseEntity<MalwareDTO> createMalware(@RequestBody MalwareDTO malwareDTO) throws URISyntaxException {
        log.debug("REST request to save Malware : {}", malwareDTO);
        if (malwareDTO.getId() != null) {
            throw new BadRequestAlertException("A new malware cannot already have an ID", ENTITY_NAME, "idexists");
        }
        MalwareDTO result = malwareService.save(malwareDTO);
        return ResponseEntity.created(new URI("/api/malwares/" + result.getId()))
            .headers(HeaderUtil.createEntityCreationAlert(ENTITY_NAME, result.getId().toString()))
            .body(result);
    }

    /**
     * PUT  /malwares : Updates an existing malware.
     *
     * @param malwareDTO the malwareDTO to update
     * @return the ResponseEntity with status 200 (OK) and with body the updated malwareDTO,
     * or with status 400 (Bad Request) if the malwareDTO is not valid,
     * or with status 500 (Internal Server Error) if the malwareDTO couldn't be updated
     * @throws URISyntaxException if the Location URI syntax is incorrect
     */
    @PutMapping("/malwares")
    @Timed
    public ResponseEntity<MalwareDTO> updateMalware(@RequestBody MalwareDTO malwareDTO) throws URISyntaxException {
        log.debug("REST request to update Malware : {}", malwareDTO);
        if (malwareDTO.getId() == null) {
            throw new BadRequestAlertException("Invalid id", ENTITY_NAME, "idnull");
        }
        MalwareDTO result = malwareService.save(malwareDTO);
        return ResponseEntity.ok()
            .headers(HeaderUtil.createEntityUpdateAlert(ENTITY_NAME, malwareDTO.getId().toString()))
            .body(result);
    }

    /**
     * GET  /malwares : get all the malwares.
     *
     * @param pageable the pagination information
     * @param criteria the criterias which the requested entities should match
     * @return the ResponseEntity with status 200 (OK) and the list of malwares in body
     */
    @GetMapping("/malwares")
    @Timed
    public ResponseEntity<List<MalwareDTO>> getAllMalwares(MalwareCriteria criteria, Pageable pageable) {
        log.debug("REST request to get Malwares by criteria: {}", criteria);
        Page<MalwareDTO> page = malwareQueryService.findByCriteria(criteria, pageable);
        HttpHeaders headers = PaginationUtil.generatePaginationHttpHeaders(page, "/api/malwares");
        return new ResponseEntity<>(page.getContent(), headers, HttpStatus.OK);
    }

    /**
     * GET  /malwares/:id : get the "id" malware.
     *
     * @param id the id of the malwareDTO to retrieve
     * @return the ResponseEntity with status 200 (OK) and with body the malwareDTO, or with status 404 (Not Found)
     */
    @GetMapping("/malwares/{id}")
    @Timed
    public ResponseEntity<MalwareDTO> getMalware(@PathVariable Long id) {
        log.debug("REST request to get Malware : {}", id);
        Optional<MalwareDTO> malwareDTO = malwareService.findOne(id);
        return ResponseUtil.wrapOrNotFound(malwareDTO);
    }

    /**
     * DELETE  /malwares/:id : delete the "id" malware.
     *
     * @param id the id of the malwareDTO to delete
     * @return the ResponseEntity with status 200 (OK)
     */
    @DeleteMapping("/malwares/{id}")
    @Timed
    public ResponseEntity<Void> deleteMalware(@PathVariable Long id) {
        log.debug("REST request to delete Malware : {}", id);
        malwareService.delete(id);
        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(ENTITY_NAME, id.toString())).build();
    }

    /**
     * SEARCH  /_search/malwares?query=:query : search for the malware corresponding
     * to the query.
     *
     * @param query the query of the malware search
     * @param pageable the pagination information
     * @return the result of the search
     */
    @GetMapping("/_search/malwares")
    @Timed
    public ResponseEntity<List<MalwareDTO>> searchMalwares(@RequestParam String query, Pageable pageable) {
        log.debug("REST request to search for a page of Malwares for query {}", query);
        Page<MalwareDTO> page = malwareService.search(query, pageable);
        HttpHeaders headers = PaginationUtil.generateSearchPaginationHttpHeaders(query, page, "/api/_search/malwares");
        return new ResponseEntity<>(page.getContent(), headers, HttpStatus.OK);
    }

}

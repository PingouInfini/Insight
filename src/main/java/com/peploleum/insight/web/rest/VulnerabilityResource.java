package com.peploleum.insight.web.rest;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import java.util.Optional;

import com.codahale.metrics.annotation.Timed;
import com.peploleum.insight.service.VulnerabilityQueryService;
import com.peploleum.insight.service.VulnerabilityService;
import com.peploleum.insight.service.dto.VulnerabilityCriteria;
import com.peploleum.insight.service.dto.VulnerabilityDTO;
import com.peploleum.insight.web.rest.errors.BadRequestAlertException;
import com.peploleum.insight.web.rest.util.HeaderUtil;
import com.peploleum.insight.web.rest.util.PaginationUtil;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import io.github.jhipster.web.util.ResponseUtil;

/**
 * REST controller for managing Vulnerability.
 */
@RestController
@RequestMapping("/api")
public class VulnerabilityResource {

    private final Logger log = LoggerFactory.getLogger(VulnerabilityResource.class);

    private static final String ENTITY_NAME = "vulnerability";

    private final VulnerabilityService vulnerabilityService;

    private final VulnerabilityQueryService vulnerabilityQueryService;

    public VulnerabilityResource(VulnerabilityService vulnerabilityService, VulnerabilityQueryService vulnerabilityQueryService) {
        this.vulnerabilityService = vulnerabilityService;
        this.vulnerabilityQueryService = vulnerabilityQueryService;
    }

    /**
     * POST  /vulnerabilities : Create a new vulnerability.
     *
     * @param vulnerabilityDTO the vulnerabilityDTO to create
     * @return the ResponseEntity with status 201 (Created) and with body the new vulnerabilityDTO, or with status 400 (Bad Request) if the vulnerability has already an ID
     * @throws URISyntaxException if the Location URI syntax is incorrect
     */
    @PostMapping("/vulnerabilities")
    @Timed
    public ResponseEntity<VulnerabilityDTO> createVulnerability(@RequestBody VulnerabilityDTO vulnerabilityDTO) throws URISyntaxException {
        log.debug("REST request to save Vulnerability : {}", vulnerabilityDTO);
        if (vulnerabilityDTO.getId() != null) {
            throw new BadRequestAlertException("A new vulnerability cannot already have an ID", ENTITY_NAME, "idexists");
        }
        VulnerabilityDTO result = vulnerabilityService.save(vulnerabilityDTO);
        return ResponseEntity.created(new URI("/api/vulnerabilities/" + result.getId()))
            .headers(HeaderUtil.createEntityCreationAlert(ENTITY_NAME, result.getId().toString()))
            .body(result);
    }

    /**
     * PUT  /vulnerabilities : Updates an existing vulnerability.
     *
     * @param vulnerabilityDTO the vulnerabilityDTO to update
     * @return the ResponseEntity with status 200 (OK) and with body the updated vulnerabilityDTO,
     * or with status 400 (Bad Request) if the vulnerabilityDTO is not valid,
     * or with status 500 (Internal Server Error) if the vulnerabilityDTO couldn't be updated
     * @throws URISyntaxException if the Location URI syntax is incorrect
     */
    @PutMapping("/vulnerabilities")
    @Timed
    public ResponseEntity<VulnerabilityDTO> updateVulnerability(@RequestBody VulnerabilityDTO vulnerabilityDTO) throws URISyntaxException {
        log.debug("REST request to update Vulnerability : {}", vulnerabilityDTO);
        if (vulnerabilityDTO.getId() == null) {
            throw new BadRequestAlertException("Invalid id", ENTITY_NAME, "idnull");
        }
        VulnerabilityDTO result = vulnerabilityService.save(vulnerabilityDTO);
        return ResponseEntity.ok()
            .headers(HeaderUtil.createEntityUpdateAlert(ENTITY_NAME, vulnerabilityDTO.getId().toString()))
            .body(result);
    }

    /**
     * GET  /vulnerabilities : get all the vulnerabilities.
     *
     * @param pageable the pagination information
     * @param criteria the criterias which the requested entities should match
     * @return the ResponseEntity with status 200 (OK) and the list of vulnerabilities in body
     */
    @GetMapping("/vulnerabilities")
    @Timed
    public ResponseEntity<List<VulnerabilityDTO>> getAllVulnerabilities(VulnerabilityCriteria criteria, Pageable pageable) {
        log.debug("REST request to get Vulnerabilities by criteria: {}", criteria);
        Page<VulnerabilityDTO> page = vulnerabilityQueryService.findByCriteria(criteria, pageable);
        HttpHeaders headers = PaginationUtil.generatePaginationHttpHeaders(page, "/api/vulnerabilities");
        return new ResponseEntity<>(page.getContent(), headers, HttpStatus.OK);
    }

    /**
     * GET  /vulnerabilities/:id : get the "id" vulnerability.
     *
     * @param id the id of the vulnerabilityDTO to retrieve
     * @return the ResponseEntity with status 200 (OK) and with body the vulnerabilityDTO, or with status 404 (Not Found)
     */
    @GetMapping("/vulnerabilities/{id}")
    @Timed
    public ResponseEntity<VulnerabilityDTO> getVulnerability(@PathVariable Long id) {
        log.debug("REST request to get Vulnerability : {}", id);
        Optional<VulnerabilityDTO> vulnerabilityDTO = vulnerabilityService.findOne(id);
        return ResponseUtil.wrapOrNotFound(vulnerabilityDTO);
    }

    /**
     * DELETE  /vulnerabilities/:id : delete the "id" vulnerability.
     *
     * @param id the id of the vulnerabilityDTO to delete
     * @return the ResponseEntity with status 200 (OK)
     */
    @DeleteMapping("/vulnerabilities/{id}")
    @Timed
    public ResponseEntity<Void> deleteVulnerability(@PathVariable Long id) {
        log.debug("REST request to delete Vulnerability : {}", id);
        vulnerabilityService.delete(id);
        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(ENTITY_NAME, id.toString())).build();
    }

    /**
     * SEARCH  /_search/vulnerabilities?query=:query : search for the vulnerability corresponding
     * to the query.
     *
     * @param query the query of the vulnerability search
     * @param pageable the pagination information
     * @return the result of the search
     */
    @GetMapping("/_search/vulnerabilities")
    @Timed
    public ResponseEntity<List<VulnerabilityDTO>> searchVulnerabilities(@RequestParam String query, Pageable pageable) {
        log.debug("REST request to search for a page of Vulnerabilities for query {}", query);
        Page<VulnerabilityDTO> page = vulnerabilityService.search(query, pageable);
        HttpHeaders headers = PaginationUtil.generateSearchPaginationHttpHeaders(query, page, "/api/_search/vulnerabilities");
        return new ResponseEntity<>(page.getContent(), headers, HttpStatus.OK);
    }

}

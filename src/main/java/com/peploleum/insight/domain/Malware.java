package com.peploleum.insight.domain;

import java.io.Serializable;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.springframework.data.elasticsearch.annotations.Document;

/**
 * A Malware.
 */
@Entity
@Table(name = "malware")
@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
@Document(indexName = "malware")
public class Malware implements Serializable {

    private static final long serialVersionUID = 1L;

    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "sequenceGenerator")
    @SequenceGenerator(name = "sequenceGenerator")
    private Long id;

    @Column(name = "description")
    private String description;

    @Column(name = "nom")
    private String nom;

    @Column(name = "jhi_type")
    private String type;

    @Column(name = "libelle")
    private String libelle;

    @OneToMany(mappedBy = "variantOf")
    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
    private Set<Malware> isVariantOfs = new HashSet<>();

    @OneToMany(mappedBy = "isUsesThreatActorToMalware")
    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
    private Set<ThreatActor> usesMalwareToThreatActors = new HashSet<>();

    @OneToMany(mappedBy = "isUsesToolToMalware")
    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
    private Set<Tool> usesMalwareToTools = new HashSet<>();

    @ManyToOne
    @JsonIgnoreProperties("usesAttackPatternToMalwares")
    private AttackPattern isUsesMalwareToAttackPattern;

    @ManyToOne
    @JsonIgnoreProperties("targetsActorToMalwares")
    private Actor isTargetsMalwareToActor;

    @ManyToOne
    @JsonIgnoreProperties("isVariantOfs")
    private Malware variantOf;

    @ManyToOne
    @JsonIgnoreProperties("isLinkOfMalwares")
    private NetLink linkOf;

    // jhipster-needle-entity-add-field - JHipster will add fields here, do not remove
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getDescription() {
        return description;
    }

    public Malware description(String description) {
        this.description = description;
        return this;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getNom() {
        return nom;
    }

    public Malware nom(String nom) {
        this.nom = nom;
        return this;
    }

    public void setNom(String nom) {
        this.nom = nom;
    }

    public String getType() {
        return type;
    }

    public Malware type(String type) {
        this.type = type;
        return this;
    }

    public void setType(String type) {
        this.type = type;
    }

    public String getLibelle() {
        return libelle;
    }

    public Malware libelle(String libelle) {
        this.libelle = libelle;
        return this;
    }

    public void setLibelle(String libelle) {
        this.libelle = libelle;
    }

    public Set<Malware> getIsVariantOfs() {
        return isVariantOfs;
    }

    public Malware isVariantOfs(Set<Malware> malwares) {
        this.isVariantOfs = malwares;
        return this;
    }

    public Malware addIsVariantOf(Malware malware) {
        this.isVariantOfs.add(malware);
        malware.setVariantOf(this);
        return this;
    }

    public Malware removeIsVariantOf(Malware malware) {
        this.isVariantOfs.remove(malware);
        malware.setVariantOf(null);
        return this;
    }

    public void setIsVariantOfs(Set<Malware> malwares) {
        this.isVariantOfs = malwares;
    }

    public Set<ThreatActor> getUsesMalwareToThreatActors() {
        return usesMalwareToThreatActors;
    }

    public Malware usesMalwareToThreatActors(Set<ThreatActor> threatActors) {
        this.usesMalwareToThreatActors = threatActors;
        return this;
    }

    public Malware addUsesMalwareToThreatActor(ThreatActor threatActor) {
        this.usesMalwareToThreatActors.add(threatActor);
        threatActor.setIsUsesThreatActorToMalware(this);
        return this;
    }

    public Malware removeUsesMalwareToThreatActor(ThreatActor threatActor) {
        this.usesMalwareToThreatActors.remove(threatActor);
        threatActor.setIsUsesThreatActorToMalware(null);
        return this;
    }

    public void setUsesMalwareToThreatActors(Set<ThreatActor> threatActors) {
        this.usesMalwareToThreatActors = threatActors;
    }

    public Set<Tool> getUsesMalwareToTools() {
        return usesMalwareToTools;
    }

    public Malware usesMalwareToTools(Set<Tool> tools) {
        this.usesMalwareToTools = tools;
        return this;
    }

    public Malware addUsesMalwareToTool(Tool tool) {
        this.usesMalwareToTools.add(tool);
        tool.setIsUsesToolToMalware(this);
        return this;
    }

    public Malware removeUsesMalwareToTool(Tool tool) {
        this.usesMalwareToTools.remove(tool);
        tool.setIsUsesToolToMalware(null);
        return this;
    }

    public void setUsesMalwareToTools(Set<Tool> tools) {
        this.usesMalwareToTools = tools;
    }

    public AttackPattern getIsUsesMalwareToAttackPattern() {
        return isUsesMalwareToAttackPattern;
    }

    public Malware isUsesMalwareToAttackPattern(AttackPattern attackPattern) {
        this.isUsesMalwareToAttackPattern = attackPattern;
        return this;
    }

    public void setIsUsesMalwareToAttackPattern(AttackPattern attackPattern) {
        this.isUsesMalwareToAttackPattern = attackPattern;
    }

    public Actor getIsTargetsMalwareToActor() {
        return isTargetsMalwareToActor;
    }

    public Malware isTargetsMalwareToActor(Actor actor) {
        this.isTargetsMalwareToActor = actor;
        return this;
    }

    public void setIsTargetsMalwareToActor(Actor actor) {
        this.isTargetsMalwareToActor = actor;
    }

    public Malware getVariantOf() {
        return variantOf;
    }

    public Malware variantOf(Malware malware) {
        this.variantOf = malware;
        return this;
    }

    public void setVariantOf(Malware malware) {
        this.variantOf = malware;
    }

    public NetLink getLinkOf() {
        return linkOf;
    }

    public Malware linkOf(NetLink netLink) {
        this.linkOf = netLink;
        return this;
    }

    public void setLinkOf(NetLink netLink) {
        this.linkOf = netLink;
    }
    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here, do not remove

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Malware malware = (Malware) o;
        if (malware.getId() == null || getId() == null) {
            return false;
        }
        return Objects.equals(getId(), malware.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hashCode(getId());
    }

    @Override
    public String toString() {
        return "Malware{" +
            "id=" + getId() +
            ", description='" + getDescription() + "'" +
            ", nom='" + getNom() + "'" +
            ", type='" + getType() + "'" +
            ", libelle='" + getLibelle() + "'" +
            "}";
    }
}

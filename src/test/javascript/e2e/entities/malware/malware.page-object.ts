import { element, by, ElementFinder } from 'protractor';

export class MalwareComponentsPage {
    createButton = element(by.id('jh-create-entity'));
    title = element.all(by.css('jhi-malware div h2#page-heading span')).first();

    async clickOnCreateButton() {
        await this.createButton.click();
    }

    async getTitle() {
        return this.title.getAttribute('jhiTranslate');
    }
}

export class MalwareUpdatePage {
    pageTitle = element(by.id('jhi-malware-heading'));
    saveButton = element(by.id('save-entity'));
    cancelButton = element(by.id('cancel-save'));
    descriptionInput = element(by.id('field_description'));
    nomInput = element(by.id('field_nom'));
    typeInput = element(by.id('field_type'));
    libelleInput = element(by.id('field_libelle'));
    isUsesMalwareToAttackPatternSelect = element(by.id('field_isUsesMalwareToAttackPattern'));
    isTargetsMalwareToActorSelect = element(by.id('field_isTargetsMalwareToActor'));
    variantOfSelect = element(by.id('field_variantOf'));
    linkOfSelect = element(by.id('field_linkOf'));

    async getPageTitle() {
        return this.pageTitle.getAttribute('jhiTranslate');
    }

    async setDescriptionInput(description) {
        await this.descriptionInput.sendKeys(description);
    }

    async getDescriptionInput() {
        return this.descriptionInput.getAttribute('value');
    }

    async setNomInput(nom) {
        await this.nomInput.sendKeys(nom);
    }

    async getNomInput() {
        return this.nomInput.getAttribute('value');
    }

    async setTypeInput(type) {
        await this.typeInput.sendKeys(type);
    }

    async getTypeInput() {
        return this.typeInput.getAttribute('value');
    }

    async setLibelleInput(libelle) {
        await this.libelleInput.sendKeys(libelle);
    }

    async getLibelleInput() {
        return this.libelleInput.getAttribute('value');
    }

    async isUsesMalwareToAttackPatternSelectLastOption() {
        await this.isUsesMalwareToAttackPatternSelect
            .all(by.tagName('option'))
            .last()
            .click();
    }

    async isUsesMalwareToAttackPatternSelectOption(option) {
        await this.isUsesMalwareToAttackPatternSelect.sendKeys(option);
    }

    getIsUsesMalwareToAttackPatternSelect(): ElementFinder {
        return this.isUsesMalwareToAttackPatternSelect;
    }

    async getIsUsesMalwareToAttackPatternSelectedOption() {
        return this.isUsesMalwareToAttackPatternSelect.element(by.css('option:checked')).getText();
    }

    async isTargetsMalwareToActorSelectLastOption() {
        await this.isTargetsMalwareToActorSelect
            .all(by.tagName('option'))
            .last()
            .click();
    }

    async isTargetsMalwareToActorSelectOption(option) {
        await this.isTargetsMalwareToActorSelect.sendKeys(option);
    }

    getIsTargetsMalwareToActorSelect(): ElementFinder {
        return this.isTargetsMalwareToActorSelect;
    }

    async getIsTargetsMalwareToActorSelectedOption() {
        return this.isTargetsMalwareToActorSelect.element(by.css('option:checked')).getText();
    }

    async variantOfSelectLastOption() {
        await this.variantOfSelect
            .all(by.tagName('option'))
            .last()
            .click();
    }

    async variantOfSelectOption(option) {
        await this.variantOfSelect.sendKeys(option);
    }

    getVariantOfSelect(): ElementFinder {
        return this.variantOfSelect;
    }

    async getVariantOfSelectedOption() {
        return this.variantOfSelect.element(by.css('option:checked')).getText();
    }

    async linkOfSelectLastOption() {
        await this.linkOfSelect
            .all(by.tagName('option'))
            .last()
            .click();
    }

    async linkOfSelectOption(option) {
        await this.linkOfSelect.sendKeys(option);
    }

    getLinkOfSelect(): ElementFinder {
        return this.linkOfSelect;
    }

    async getLinkOfSelectedOption() {
        return this.linkOfSelect.element(by.css('option:checked')).getText();
    }

    async save() {
        await this.saveButton.click();
    }

    async cancel() {
        await this.cancelButton.click();
    }

    getSaveButton(): ElementFinder {
        return this.saveButton;
    }
}

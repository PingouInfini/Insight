import { browser, ExpectedConditions as ec } from 'protractor';
import { NavBarPage, SignInPage } from '../../page-objects/jhi-page-objects';

import { MalwareComponentsPage, MalwareUpdatePage } from './malware.page-object';

describe('Malware e2e test', () => {
    let navBarPage: NavBarPage;
    let signInPage: SignInPage;
    let malwareUpdatePage: MalwareUpdatePage;
    let malwareComponentsPage: MalwareComponentsPage;

    beforeAll(async () => {
        await browser.get('/');
        navBarPage = new NavBarPage();
        signInPage = await navBarPage.getSignInPage();
        await signInPage.autoSignInUsing('admin', 'admin');
        await browser.wait(ec.visibilityOf(navBarPage.entityMenu), 5000);
    });

    it('should load Malwares', async () => {
        await navBarPage.goToEntity('malware');
        malwareComponentsPage = new MalwareComponentsPage();
        expect(await malwareComponentsPage.getTitle()).toMatch(/insightApp.malware.home.title/);
    });

    it('should load create Malware page', async () => {
        await malwareComponentsPage.clickOnCreateButton();
        malwareUpdatePage = new MalwareUpdatePage();
        expect(await malwareUpdatePage.getPageTitle()).toMatch(/insightApp.malware.home.createOrEditLabel/);
        await malwareUpdatePage.cancel();
    });

    it('should create and save Malwares', async () => {
        await malwareComponentsPage.clickOnCreateButton();
        await malwareUpdatePage.setDescriptionInput('description');
        expect(await malwareUpdatePage.getDescriptionInput()).toMatch('description');
        await malwareUpdatePage.setNomInput('nom');
        expect(await malwareUpdatePage.getNomInput()).toMatch('nom');
        await malwareUpdatePage.setTypeInput('type');
        expect(await malwareUpdatePage.getTypeInput()).toMatch('type');
        await malwareUpdatePage.setLibelleInput('libelle');
        expect(await malwareUpdatePage.getLibelleInput()).toMatch('libelle');
        await malwareUpdatePage.isUsesMalwareToAttackPatternSelectLastOption();
        await malwareUpdatePage.isTargetsMalwareToActorSelectLastOption();
        await malwareUpdatePage.variantOfSelectLastOption();
        await malwareUpdatePage.linkOfSelectLastOption();
        await malwareUpdatePage.save();
        expect(await malwareUpdatePage.getSaveButton().isPresent()).toBeFalsy();
    });

    afterAll(async () => {
        await navBarPage.autoSignOut();
    });
});

import { browser, ExpectedConditions as ec } from 'protractor';
import { NavBarPage, SignInPage } from '../../page-objects/jhi-page-objects';

import { VulnerabilityComponentsPage, VulnerabilityUpdatePage } from './vulnerability.page-object';

describe('Vulnerability e2e test', () => {
    let navBarPage: NavBarPage;
    let signInPage: SignInPage;
    let vulnerabilityUpdatePage: VulnerabilityUpdatePage;
    let vulnerabilityComponentsPage: VulnerabilityComponentsPage;

    beforeAll(async () => {
        await browser.get('/');
        navBarPage = new NavBarPage();
        signInPage = await navBarPage.getSignInPage();
        await signInPage.autoSignInUsing('admin', 'admin');
        await browser.wait(ec.visibilityOf(navBarPage.entityMenu), 5000);
    });

    it('should load Vulnerabilities', async () => {
        await navBarPage.goToEntity('vulnerability');
        vulnerabilityComponentsPage = new VulnerabilityComponentsPage();
        expect(await vulnerabilityComponentsPage.getTitle()).toMatch(/insightApp.vulnerability.home.title/);
    });

    it('should load create Vulnerability page', async () => {
        await vulnerabilityComponentsPage.clickOnCreateButton();
        vulnerabilityUpdatePage = new VulnerabilityUpdatePage();
        expect(await vulnerabilityUpdatePage.getPageTitle()).toMatch(/insightApp.vulnerability.home.createOrEditLabel/);
        await vulnerabilityUpdatePage.cancel();
    });

    it('should create and save Vulnerabilities', async () => {
        await vulnerabilityComponentsPage.clickOnCreateButton();
        await vulnerabilityUpdatePage.setNomInput('nom');
        expect(await vulnerabilityUpdatePage.getNomInput()).toMatch('nom');
        await vulnerabilityUpdatePage.setTypeInput('type');
        expect(await vulnerabilityUpdatePage.getTypeInput()).toMatch('type');
        await vulnerabilityUpdatePage.setDescriptionInput('description');
        expect(await vulnerabilityUpdatePage.getDescriptionInput()).toMatch('description');
        await vulnerabilityUpdatePage.setReferenceExterneInput('referenceExterne');
        expect(await vulnerabilityUpdatePage.getReferenceExterneInput()).toMatch('referenceExterne');
        await vulnerabilityUpdatePage.linkOfSelectLastOption();
        await vulnerabilityUpdatePage.targetsVulnerabilityToThreatActorSelectLastOption();
        await vulnerabilityUpdatePage.targetsVulnerabilityToToolSelectLastOption();
        await vulnerabilityUpdatePage.save();
        expect(await vulnerabilityUpdatePage.getSaveButton().isPresent()).toBeFalsy();
    });

    afterAll(async () => {
        await navBarPage.autoSignOut();
    });
});

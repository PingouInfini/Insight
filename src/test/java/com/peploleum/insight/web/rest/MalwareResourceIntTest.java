package com.peploleum.insight.web.rest;

import com.peploleum.insight.InsightApp;

import com.peploleum.insight.domain.Malware;
import com.peploleum.insight.domain.Malware;
import com.peploleum.insight.domain.ThreatActor;
import com.peploleum.insight.domain.Tool;
import com.peploleum.insight.domain.AttackPattern;
import com.peploleum.insight.domain.Actor;
import com.peploleum.insight.domain.Malware;
import com.peploleum.insight.domain.NetLink;
import com.peploleum.insight.repository.MalwareRepository;
import com.peploleum.insight.repository.search.MalwareSearchRepository;
import com.peploleum.insight.service.MalwareService;
import com.peploleum.insight.service.dto.MalwareDTO;
import com.peploleum.insight.service.mapper.MalwareMapper;
import com.peploleum.insight.web.rest.errors.ExceptionTranslator;
import com.peploleum.insight.service.dto.MalwareCriteria;
import com.peploleum.insight.service.MalwareQueryService;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.web.PageableHandlerMethodArgumentResolver;
import org.springframework.http.MediaType;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.EntityManager;
import java.util.Collections;
import java.util.List;


import static com.peploleum.insight.web.rest.TestUtil.createFormattingConversionService;
import static org.assertj.core.api.Assertions.assertThat;
import static org.elasticsearch.index.query.QueryBuilders.queryStringQuery;
import static org.hamcrest.Matchers.hasItem;
import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

/**
 * Test class for the MalwareResource REST controller.
 *
 * @see MalwareResource
 */
@RunWith(SpringRunner.class)
@SpringBootTest(classes = InsightApp.class)
public class MalwareResourceIntTest {

    private static final String DEFAULT_DESCRIPTION = "AAAAAAAAAA";
    private static final String UPDATED_DESCRIPTION = "BBBBBBBBBB";

    private static final String DEFAULT_NOM = "AAAAAAAAAA";
    private static final String UPDATED_NOM = "BBBBBBBBBB";

    private static final String DEFAULT_TYPE = "AAAAAAAAAA";
    private static final String UPDATED_TYPE = "BBBBBBBBBB";

    private static final String DEFAULT_LIBELLE = "AAAAAAAAAA";
    private static final String UPDATED_LIBELLE = "BBBBBBBBBB";

    @Autowired
    private MalwareRepository malwareRepository;


    @Autowired
    private MalwareMapper malwareMapper;
    

    @Autowired
    private MalwareService malwareService;

    /**
     * This repository is mocked in the com.peploleum.insight.repository.search test package.
     *
     * @see com.peploleum.insight.repository.search.MalwareSearchRepositoryMockConfiguration
     */
    @Autowired
    private MalwareSearchRepository mockMalwareSearchRepository;

    @Autowired
    private MalwareQueryService malwareQueryService;

    @Autowired
    private MappingJackson2HttpMessageConverter jacksonMessageConverter;

    @Autowired
    private PageableHandlerMethodArgumentResolver pageableArgumentResolver;

    @Autowired
    private ExceptionTranslator exceptionTranslator;

    @Autowired
    private EntityManager em;

    private MockMvc restMalwareMockMvc;

    private Malware malware;

    @Before
    public void setup() {
        MockitoAnnotations.initMocks(this);
        final MalwareResource malwareResource = new MalwareResource(malwareService, malwareQueryService);
        this.restMalwareMockMvc = MockMvcBuilders.standaloneSetup(malwareResource)
            .setCustomArgumentResolvers(pageableArgumentResolver)
            .setControllerAdvice(exceptionTranslator)
            .setConversionService(createFormattingConversionService())
            .setMessageConverters(jacksonMessageConverter).build();
    }

    /**
     * Create an entity for this test.
     *
     * This is a static method, as tests for other entities might also need it,
     * if they test an entity which requires the current entity.
     */
    public static Malware createEntity(EntityManager em) {
        Malware malware = new Malware()
            .description(DEFAULT_DESCRIPTION)
            .nom(DEFAULT_NOM)
            .type(DEFAULT_TYPE)
            .libelle(DEFAULT_LIBELLE);
        return malware;
    }

    @Before
    public void initTest() {
        malware = createEntity(em);
    }

    @Test
    @Transactional
    public void createMalware() throws Exception {
        int databaseSizeBeforeCreate = malwareRepository.findAll().size();

        // Create the Malware
        MalwareDTO malwareDTO = malwareMapper.toDto(malware);
        restMalwareMockMvc.perform(post("/api/malwares")
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(malwareDTO)))
            .andExpect(status().isCreated());

        // Validate the Malware in the database
        List<Malware> malwareList = malwareRepository.findAll();
        assertThat(malwareList).hasSize(databaseSizeBeforeCreate + 1);
        Malware testMalware = malwareList.get(malwareList.size() - 1);
        assertThat(testMalware.getDescription()).isEqualTo(DEFAULT_DESCRIPTION);
        assertThat(testMalware.getNom()).isEqualTo(DEFAULT_NOM);
        assertThat(testMalware.getType()).isEqualTo(DEFAULT_TYPE);
        assertThat(testMalware.getLibelle()).isEqualTo(DEFAULT_LIBELLE);

        // Validate the Malware in Elasticsearch
        verify(mockMalwareSearchRepository, times(1)).save(testMalware);
    }

    @Test
    @Transactional
    public void createMalwareWithExistingId() throws Exception {
        int databaseSizeBeforeCreate = malwareRepository.findAll().size();

        // Create the Malware with an existing ID
        malware.setId(1L);
        MalwareDTO malwareDTO = malwareMapper.toDto(malware);

        // An entity with an existing ID cannot be created, so this API call must fail
        restMalwareMockMvc.perform(post("/api/malwares")
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(malwareDTO)))
            .andExpect(status().isBadRequest());

        // Validate the Malware in the database
        List<Malware> malwareList = malwareRepository.findAll();
        assertThat(malwareList).hasSize(databaseSizeBeforeCreate);

        // Validate the Malware in Elasticsearch
        verify(mockMalwareSearchRepository, times(0)).save(malware);
    }

    @Test
    @Transactional
    public void getAllMalwares() throws Exception {
        // Initialize the database
        malwareRepository.saveAndFlush(malware);

        // Get all the malwareList
        restMalwareMockMvc.perform(get("/api/malwares?sort=id,desc"))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
            .andExpect(jsonPath("$.[*].id").value(hasItem(malware.getId().intValue())))
            .andExpect(jsonPath("$.[*].description").value(hasItem(DEFAULT_DESCRIPTION.toString())))
            .andExpect(jsonPath("$.[*].nom").value(hasItem(DEFAULT_NOM.toString())))
            .andExpect(jsonPath("$.[*].type").value(hasItem(DEFAULT_TYPE.toString())))
            .andExpect(jsonPath("$.[*].libelle").value(hasItem(DEFAULT_LIBELLE.toString())));
    }
    

    @Test
    @Transactional
    public void getMalware() throws Exception {
        // Initialize the database
        malwareRepository.saveAndFlush(malware);

        // Get the malware
        restMalwareMockMvc.perform(get("/api/malwares/{id}", malware.getId()))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
            .andExpect(jsonPath("$.id").value(malware.getId().intValue()))
            .andExpect(jsonPath("$.description").value(DEFAULT_DESCRIPTION.toString()))
            .andExpect(jsonPath("$.nom").value(DEFAULT_NOM.toString()))
            .andExpect(jsonPath("$.type").value(DEFAULT_TYPE.toString()))
            .andExpect(jsonPath("$.libelle").value(DEFAULT_LIBELLE.toString()));
    }

    @Test
    @Transactional
    public void getAllMalwaresByDescriptionIsEqualToSomething() throws Exception {
        // Initialize the database
        malwareRepository.saveAndFlush(malware);

        // Get all the malwareList where description equals to DEFAULT_DESCRIPTION
        defaultMalwareShouldBeFound("description.equals=" + DEFAULT_DESCRIPTION);

        // Get all the malwareList where description equals to UPDATED_DESCRIPTION
        defaultMalwareShouldNotBeFound("description.equals=" + UPDATED_DESCRIPTION);
    }

    @Test
    @Transactional
    public void getAllMalwaresByDescriptionIsInShouldWork() throws Exception {
        // Initialize the database
        malwareRepository.saveAndFlush(malware);

        // Get all the malwareList where description in DEFAULT_DESCRIPTION or UPDATED_DESCRIPTION
        defaultMalwareShouldBeFound("description.in=" + DEFAULT_DESCRIPTION + "," + UPDATED_DESCRIPTION);

        // Get all the malwareList where description equals to UPDATED_DESCRIPTION
        defaultMalwareShouldNotBeFound("description.in=" + UPDATED_DESCRIPTION);
    }

    @Test
    @Transactional
    public void getAllMalwaresByDescriptionIsNullOrNotNull() throws Exception {
        // Initialize the database
        malwareRepository.saveAndFlush(malware);

        // Get all the malwareList where description is not null
        defaultMalwareShouldBeFound("description.specified=true");

        // Get all the malwareList where description is null
        defaultMalwareShouldNotBeFound("description.specified=false");
    }

    @Test
    @Transactional
    public void getAllMalwaresByNomIsEqualToSomething() throws Exception {
        // Initialize the database
        malwareRepository.saveAndFlush(malware);

        // Get all the malwareList where nom equals to DEFAULT_NOM
        defaultMalwareShouldBeFound("nom.equals=" + DEFAULT_NOM);

        // Get all the malwareList where nom equals to UPDATED_NOM
        defaultMalwareShouldNotBeFound("nom.equals=" + UPDATED_NOM);
    }

    @Test
    @Transactional
    public void getAllMalwaresByNomIsInShouldWork() throws Exception {
        // Initialize the database
        malwareRepository.saveAndFlush(malware);

        // Get all the malwareList where nom in DEFAULT_NOM or UPDATED_NOM
        defaultMalwareShouldBeFound("nom.in=" + DEFAULT_NOM + "," + UPDATED_NOM);

        // Get all the malwareList where nom equals to UPDATED_NOM
        defaultMalwareShouldNotBeFound("nom.in=" + UPDATED_NOM);
    }

    @Test
    @Transactional
    public void getAllMalwaresByNomIsNullOrNotNull() throws Exception {
        // Initialize the database
        malwareRepository.saveAndFlush(malware);

        // Get all the malwareList where nom is not null
        defaultMalwareShouldBeFound("nom.specified=true");

        // Get all the malwareList where nom is null
        defaultMalwareShouldNotBeFound("nom.specified=false");
    }

    @Test
    @Transactional
    public void getAllMalwaresByTypeIsEqualToSomething() throws Exception {
        // Initialize the database
        malwareRepository.saveAndFlush(malware);

        // Get all the malwareList where type equals to DEFAULT_TYPE
        defaultMalwareShouldBeFound("type.equals=" + DEFAULT_TYPE);

        // Get all the malwareList where type equals to UPDATED_TYPE
        defaultMalwareShouldNotBeFound("type.equals=" + UPDATED_TYPE);
    }

    @Test
    @Transactional
    public void getAllMalwaresByTypeIsInShouldWork() throws Exception {
        // Initialize the database
        malwareRepository.saveAndFlush(malware);

        // Get all the malwareList where type in DEFAULT_TYPE or UPDATED_TYPE
        defaultMalwareShouldBeFound("type.in=" + DEFAULT_TYPE + "," + UPDATED_TYPE);

        // Get all the malwareList where type equals to UPDATED_TYPE
        defaultMalwareShouldNotBeFound("type.in=" + UPDATED_TYPE);
    }

    @Test
    @Transactional
    public void getAllMalwaresByTypeIsNullOrNotNull() throws Exception {
        // Initialize the database
        malwareRepository.saveAndFlush(malware);

        // Get all the malwareList where type is not null
        defaultMalwareShouldBeFound("type.specified=true");

        // Get all the malwareList where type is null
        defaultMalwareShouldNotBeFound("type.specified=false");
    }

    @Test
    @Transactional
    public void getAllMalwaresByLibelleIsEqualToSomething() throws Exception {
        // Initialize the database
        malwareRepository.saveAndFlush(malware);

        // Get all the malwareList where libelle equals to DEFAULT_LIBELLE
        defaultMalwareShouldBeFound("libelle.equals=" + DEFAULT_LIBELLE);

        // Get all the malwareList where libelle equals to UPDATED_LIBELLE
        defaultMalwareShouldNotBeFound("libelle.equals=" + UPDATED_LIBELLE);
    }

    @Test
    @Transactional
    public void getAllMalwaresByLibelleIsInShouldWork() throws Exception {
        // Initialize the database
        malwareRepository.saveAndFlush(malware);

        // Get all the malwareList where libelle in DEFAULT_LIBELLE or UPDATED_LIBELLE
        defaultMalwareShouldBeFound("libelle.in=" + DEFAULT_LIBELLE + "," + UPDATED_LIBELLE);

        // Get all the malwareList where libelle equals to UPDATED_LIBELLE
        defaultMalwareShouldNotBeFound("libelle.in=" + UPDATED_LIBELLE);
    }

    @Test
    @Transactional
    public void getAllMalwaresByLibelleIsNullOrNotNull() throws Exception {
        // Initialize the database
        malwareRepository.saveAndFlush(malware);

        // Get all the malwareList where libelle is not null
        defaultMalwareShouldBeFound("libelle.specified=true");

        // Get all the malwareList where libelle is null
        defaultMalwareShouldNotBeFound("libelle.specified=false");
    }

    @Test
    @Transactional
    public void getAllMalwaresByIsVariantOfIsEqualToSomething() throws Exception {
        // Initialize the database
        Malware isVariantOf = MalwareResourceIntTest.createEntity(em);
        em.persist(isVariantOf);
        em.flush();
        malware.addIsVariantOf(isVariantOf);
        malwareRepository.saveAndFlush(malware);
        Long isVariantOfId = isVariantOf.getId();

        // Get all the malwareList where isVariantOf equals to isVariantOfId
        defaultMalwareShouldBeFound("isVariantOfId.equals=" + isVariantOfId);

        // Get all the malwareList where isVariantOf equals to isVariantOfId + 1
        defaultMalwareShouldNotBeFound("isVariantOfId.equals=" + (isVariantOfId + 1));
    }


    @Test
    @Transactional
    public void getAllMalwaresByUsesMalwareToThreatActorIsEqualToSomething() throws Exception {
        // Initialize the database
        ThreatActor usesMalwareToThreatActor = ThreatActorResourceIntTest.createEntity(em);
        em.persist(usesMalwareToThreatActor);
        em.flush();
        malware.addUsesMalwareToThreatActor(usesMalwareToThreatActor);
        malwareRepository.saveAndFlush(malware);
        Long usesMalwareToThreatActorId = usesMalwareToThreatActor.getId();

        // Get all the malwareList where usesMalwareToThreatActor equals to usesMalwareToThreatActorId
        defaultMalwareShouldBeFound("usesMalwareToThreatActorId.equals=" + usesMalwareToThreatActorId);

        // Get all the malwareList where usesMalwareToThreatActor equals to usesMalwareToThreatActorId + 1
        defaultMalwareShouldNotBeFound("usesMalwareToThreatActorId.equals=" + (usesMalwareToThreatActorId + 1));
    }


    @Test
    @Transactional
    public void getAllMalwaresByUsesMalwareToToolIsEqualToSomething() throws Exception {
        // Initialize the database
        Tool usesMalwareToTool = ToolResourceIntTest.createEntity(em);
        em.persist(usesMalwareToTool);
        em.flush();
        malware.addUsesMalwareToTool(usesMalwareToTool);
        malwareRepository.saveAndFlush(malware);
        Long usesMalwareToToolId = usesMalwareToTool.getId();

        // Get all the malwareList where usesMalwareToTool equals to usesMalwareToToolId
        defaultMalwareShouldBeFound("usesMalwareToToolId.equals=" + usesMalwareToToolId);

        // Get all the malwareList where usesMalwareToTool equals to usesMalwareToToolId + 1
        defaultMalwareShouldNotBeFound("usesMalwareToToolId.equals=" + (usesMalwareToToolId + 1));
    }


    @Test
    @Transactional
    public void getAllMalwaresByIsUsesMalwareToAttackPatternIsEqualToSomething() throws Exception {
        // Initialize the database
        AttackPattern isUsesMalwareToAttackPattern = AttackPatternResourceIntTest.createEntity(em);
        em.persist(isUsesMalwareToAttackPattern);
        em.flush();
        malware.setIsUsesMalwareToAttackPattern(isUsesMalwareToAttackPattern);
        malwareRepository.saveAndFlush(malware);
        Long isUsesMalwareToAttackPatternId = isUsesMalwareToAttackPattern.getId();

        // Get all the malwareList where isUsesMalwareToAttackPattern equals to isUsesMalwareToAttackPatternId
        defaultMalwareShouldBeFound("isUsesMalwareToAttackPatternId.equals=" + isUsesMalwareToAttackPatternId);

        // Get all the malwareList where isUsesMalwareToAttackPattern equals to isUsesMalwareToAttackPatternId + 1
        defaultMalwareShouldNotBeFound("isUsesMalwareToAttackPatternId.equals=" + (isUsesMalwareToAttackPatternId + 1));
    }


    @Test
    @Transactional
    public void getAllMalwaresByIsTargetsMalwareToActorIsEqualToSomething() throws Exception {
        // Initialize the database
        Actor isTargetsMalwareToActor = ActorResourceIntTest.createEntity(em);
        em.persist(isTargetsMalwareToActor);
        em.flush();
        malware.setIsTargetsMalwareToActor(isTargetsMalwareToActor);
        malwareRepository.saveAndFlush(malware);
        Long isTargetsMalwareToActorId = isTargetsMalwareToActor.getId();

        // Get all the malwareList where isTargetsMalwareToActor equals to isTargetsMalwareToActorId
        defaultMalwareShouldBeFound("isTargetsMalwareToActorId.equals=" + isTargetsMalwareToActorId);

        // Get all the malwareList where isTargetsMalwareToActor equals to isTargetsMalwareToActorId + 1
        defaultMalwareShouldNotBeFound("isTargetsMalwareToActorId.equals=" + (isTargetsMalwareToActorId + 1));
    }


    @Test
    @Transactional
    public void getAllMalwaresByVariantOfIsEqualToSomething() throws Exception {
        // Initialize the database
        Malware variantOf = MalwareResourceIntTest.createEntity(em);
        em.persist(variantOf);
        em.flush();
        malware.setVariantOf(variantOf);
        malwareRepository.saveAndFlush(malware);
        Long variantOfId = variantOf.getId();

        // Get all the malwareList where variantOf equals to variantOfId
        defaultMalwareShouldBeFound("variantOfId.equals=" + variantOfId);

        // Get all the malwareList where variantOf equals to variantOfId + 1
        defaultMalwareShouldNotBeFound("variantOfId.equals=" + (variantOfId + 1));
    }


    @Test
    @Transactional
    public void getAllMalwaresByLinkOfIsEqualToSomething() throws Exception {
        // Initialize the database
        NetLink linkOf = NetLinkResourceIntTest.createEntity(em);
        em.persist(linkOf);
        em.flush();
        malware.setLinkOf(linkOf);
        malwareRepository.saveAndFlush(malware);
        Long linkOfId = linkOf.getId();

        // Get all the malwareList where linkOf equals to linkOfId
        defaultMalwareShouldBeFound("linkOfId.equals=" + linkOfId);

        // Get all the malwareList where linkOf equals to linkOfId + 1
        defaultMalwareShouldNotBeFound("linkOfId.equals=" + (linkOfId + 1));
    }

    /**
     * Executes the search, and checks that the default entity is returned
     */
    private void defaultMalwareShouldBeFound(String filter) throws Exception {
        restMalwareMockMvc.perform(get("/api/malwares?sort=id,desc&" + filter))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
            .andExpect(jsonPath("$.[*].id").value(hasItem(malware.getId().intValue())))
            .andExpect(jsonPath("$.[*].description").value(hasItem(DEFAULT_DESCRIPTION.toString())))
            .andExpect(jsonPath("$.[*].nom").value(hasItem(DEFAULT_NOM.toString())))
            .andExpect(jsonPath("$.[*].type").value(hasItem(DEFAULT_TYPE.toString())))
            .andExpect(jsonPath("$.[*].libelle").value(hasItem(DEFAULT_LIBELLE.toString())));
    }

    /**
     * Executes the search, and checks that the default entity is not returned
     */
    private void defaultMalwareShouldNotBeFound(String filter) throws Exception {
        restMalwareMockMvc.perform(get("/api/malwares?sort=id,desc&" + filter))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
            .andExpect(jsonPath("$").isArray())
            .andExpect(jsonPath("$").isEmpty());
    }

    @Test
    @Transactional
    public void getNonExistingMalware() throws Exception {
        // Get the malware
        restMalwareMockMvc.perform(get("/api/malwares/{id}", Long.MAX_VALUE))
            .andExpect(status().isNotFound());
    }

    @Test
    @Transactional
    public void updateMalware() throws Exception {
        // Initialize the database
        malwareRepository.saveAndFlush(malware);

        int databaseSizeBeforeUpdate = malwareRepository.findAll().size();

        // Update the malware
        Malware updatedMalware = malwareRepository.findById(malware.getId()).get();
        // Disconnect from session so that the updates on updatedMalware are not directly saved in db
        em.detach(updatedMalware);
        updatedMalware
            .description(UPDATED_DESCRIPTION)
            .nom(UPDATED_NOM)
            .type(UPDATED_TYPE)
            .libelle(UPDATED_LIBELLE);
        MalwareDTO malwareDTO = malwareMapper.toDto(updatedMalware);

        restMalwareMockMvc.perform(put("/api/malwares")
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(malwareDTO)))
            .andExpect(status().isOk());

        // Validate the Malware in the database
        List<Malware> malwareList = malwareRepository.findAll();
        assertThat(malwareList).hasSize(databaseSizeBeforeUpdate);
        Malware testMalware = malwareList.get(malwareList.size() - 1);
        assertThat(testMalware.getDescription()).isEqualTo(UPDATED_DESCRIPTION);
        assertThat(testMalware.getNom()).isEqualTo(UPDATED_NOM);
        assertThat(testMalware.getType()).isEqualTo(UPDATED_TYPE);
        assertThat(testMalware.getLibelle()).isEqualTo(UPDATED_LIBELLE);

        // Validate the Malware in Elasticsearch
        verify(mockMalwareSearchRepository, times(1)).save(testMalware);
    }

    @Test
    @Transactional
    public void updateNonExistingMalware() throws Exception {
        int databaseSizeBeforeUpdate = malwareRepository.findAll().size();

        // Create the Malware
        MalwareDTO malwareDTO = malwareMapper.toDto(malware);

        // If the entity doesn't have an ID, it will throw BadRequestAlertException 
        restMalwareMockMvc.perform(put("/api/malwares")
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(malwareDTO)))
            .andExpect(status().isBadRequest());

        // Validate the Malware in the database
        List<Malware> malwareList = malwareRepository.findAll();
        assertThat(malwareList).hasSize(databaseSizeBeforeUpdate);

        // Validate the Malware in Elasticsearch
        verify(mockMalwareSearchRepository, times(0)).save(malware);
    }

    @Test
    @Transactional
    public void deleteMalware() throws Exception {
        // Initialize the database
        malwareRepository.saveAndFlush(malware);

        int databaseSizeBeforeDelete = malwareRepository.findAll().size();

        // Get the malware
        restMalwareMockMvc.perform(delete("/api/malwares/{id}", malware.getId())
            .accept(TestUtil.APPLICATION_JSON_UTF8))
            .andExpect(status().isOk());

        // Validate the database is empty
        List<Malware> malwareList = malwareRepository.findAll();
        assertThat(malwareList).hasSize(databaseSizeBeforeDelete - 1);

        // Validate the Malware in Elasticsearch
        verify(mockMalwareSearchRepository, times(1)).deleteById(malware.getId());
    }

    @Test
    @Transactional
    public void searchMalware() throws Exception {
        // Initialize the database
        malwareRepository.saveAndFlush(malware);
        when(mockMalwareSearchRepository.search(queryStringQuery("id:" + malware.getId()), PageRequest.of(0, 20)))
            .thenReturn(new PageImpl<>(Collections.singletonList(malware), PageRequest.of(0, 1), 1));
        // Search the malware
        restMalwareMockMvc.perform(get("/api/_search/malwares?query=id:" + malware.getId()))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
            .andExpect(jsonPath("$.[*].id").value(hasItem(malware.getId().intValue())))
            .andExpect(jsonPath("$.[*].description").value(hasItem(DEFAULT_DESCRIPTION.toString())))
            .andExpect(jsonPath("$.[*].nom").value(hasItem(DEFAULT_NOM.toString())))
            .andExpect(jsonPath("$.[*].type").value(hasItem(DEFAULT_TYPE.toString())))
            .andExpect(jsonPath("$.[*].libelle").value(hasItem(DEFAULT_LIBELLE.toString())));
    }

    @Test
    @Transactional
    public void equalsVerifier() throws Exception {
        TestUtil.equalsVerifier(Malware.class);
        Malware malware1 = new Malware();
        malware1.setId(1L);
        Malware malware2 = new Malware();
        malware2.setId(malware1.getId());
        assertThat(malware1).isEqualTo(malware2);
        malware2.setId(2L);
        assertThat(malware1).isNotEqualTo(malware2);
        malware1.setId(null);
        assertThat(malware1).isNotEqualTo(malware2);
    }

    @Test
    @Transactional
    public void dtoEqualsVerifier() throws Exception {
        TestUtil.equalsVerifier(MalwareDTO.class);
        MalwareDTO malwareDTO1 = new MalwareDTO();
        malwareDTO1.setId(1L);
        MalwareDTO malwareDTO2 = new MalwareDTO();
        assertThat(malwareDTO1).isNotEqualTo(malwareDTO2);
        malwareDTO2.setId(malwareDTO1.getId());
        assertThat(malwareDTO1).isEqualTo(malwareDTO2);
        malwareDTO2.setId(2L);
        assertThat(malwareDTO1).isNotEqualTo(malwareDTO2);
        malwareDTO1.setId(null);
        assertThat(malwareDTO1).isNotEqualTo(malwareDTO2);
    }

    @Test
    @Transactional
    public void testEntityFromId() {
        assertThat(malwareMapper.fromId(42L).getId()).isEqualTo(42);
        assertThat(malwareMapper.fromId(null)).isNull();
    }
}

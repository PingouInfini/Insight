package com.peploleum.insight.web.rest;

import com.peploleum.insight.InsightApp;

import com.peploleum.insight.domain.Vulnerability;
import com.peploleum.insight.domain.NetLink;
import com.peploleum.insight.domain.ThreatActor;
import com.peploleum.insight.domain.Tool;
import com.peploleum.insight.repository.VulnerabilityRepository;
import com.peploleum.insight.repository.search.VulnerabilitySearchRepository;
import com.peploleum.insight.service.VulnerabilityService;
import com.peploleum.insight.service.dto.VulnerabilityDTO;
import com.peploleum.insight.service.mapper.VulnerabilityMapper;
import com.peploleum.insight.web.rest.errors.ExceptionTranslator;
import com.peploleum.insight.service.dto.VulnerabilityCriteria;
import com.peploleum.insight.service.VulnerabilityQueryService;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.web.PageableHandlerMethodArgumentResolver;
import org.springframework.http.MediaType;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.EntityManager;
import java.util.Collections;
import java.util.List;


import static com.peploleum.insight.web.rest.TestUtil.createFormattingConversionService;
import static org.assertj.core.api.Assertions.assertThat;
import static org.elasticsearch.index.query.QueryBuilders.queryStringQuery;
import static org.hamcrest.Matchers.hasItem;
import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

/**
 * Test class for the VulnerabilityResource REST controller.
 *
 * @see VulnerabilityResource
 */
@RunWith(SpringRunner.class)
@SpringBootTest(classes = InsightApp.class)
public class VulnerabilityResourceIntTest {

    private static final String DEFAULT_NOM = "AAAAAAAAAA";
    private static final String UPDATED_NOM = "BBBBBBBBBB";

    private static final String DEFAULT_TYPE = "AAAAAAAAAA";
    private static final String UPDATED_TYPE = "BBBBBBBBBB";

    private static final String DEFAULT_DESCRIPTION = "AAAAAAAAAA";
    private static final String UPDATED_DESCRIPTION = "BBBBBBBBBB";

    private static final String DEFAULT_REFERENCE_EXTERNE = "AAAAAAAAAA";
    private static final String UPDATED_REFERENCE_EXTERNE = "BBBBBBBBBB";

    @Autowired
    private VulnerabilityRepository vulnerabilityRepository;


    @Autowired
    private VulnerabilityMapper vulnerabilityMapper;
    

    @Autowired
    private VulnerabilityService vulnerabilityService;

    /**
     * This repository is mocked in the com.peploleum.insight.repository.search test package.
     *
     * @see com.peploleum.insight.repository.search.VulnerabilitySearchRepositoryMockConfiguration
     */
    @Autowired
    private VulnerabilitySearchRepository mockVulnerabilitySearchRepository;

    @Autowired
    private VulnerabilityQueryService vulnerabilityQueryService;

    @Autowired
    private MappingJackson2HttpMessageConverter jacksonMessageConverter;

    @Autowired
    private PageableHandlerMethodArgumentResolver pageableArgumentResolver;

    @Autowired
    private ExceptionTranslator exceptionTranslator;

    @Autowired
    private EntityManager em;

    private MockMvc restVulnerabilityMockMvc;

    private Vulnerability vulnerability;

    @Before
    public void setup() {
        MockitoAnnotations.initMocks(this);
        final VulnerabilityResource vulnerabilityResource = new VulnerabilityResource(vulnerabilityService, vulnerabilityQueryService);
        this.restVulnerabilityMockMvc = MockMvcBuilders.standaloneSetup(vulnerabilityResource)
            .setCustomArgumentResolvers(pageableArgumentResolver)
            .setControllerAdvice(exceptionTranslator)
            .setConversionService(createFormattingConversionService())
            .setMessageConverters(jacksonMessageConverter).build();
    }

    /**
     * Create an entity for this test.
     *
     * This is a static method, as tests for other entities might also need it,
     * if they test an entity which requires the current entity.
     */
    public static Vulnerability createEntity(EntityManager em) {
        Vulnerability vulnerability = new Vulnerability()
            .nom(DEFAULT_NOM)
            .type(DEFAULT_TYPE)
            .description(DEFAULT_DESCRIPTION)
            .referenceExterne(DEFAULT_REFERENCE_EXTERNE);
        return vulnerability;
    }

    @Before
    public void initTest() {
        vulnerability = createEntity(em);
    }

    @Test
    @Transactional
    public void createVulnerability() throws Exception {
        int databaseSizeBeforeCreate = vulnerabilityRepository.findAll().size();

        // Create the Vulnerability
        VulnerabilityDTO vulnerabilityDTO = vulnerabilityMapper.toDto(vulnerability);
        restVulnerabilityMockMvc.perform(post("/api/vulnerabilities")
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(vulnerabilityDTO)))
            .andExpect(status().isCreated());

        // Validate the Vulnerability in the database
        List<Vulnerability> vulnerabilityList = vulnerabilityRepository.findAll();
        assertThat(vulnerabilityList).hasSize(databaseSizeBeforeCreate + 1);
        Vulnerability testVulnerability = vulnerabilityList.get(vulnerabilityList.size() - 1);
        assertThat(testVulnerability.getNom()).isEqualTo(DEFAULT_NOM);
        assertThat(testVulnerability.getType()).isEqualTo(DEFAULT_TYPE);
        assertThat(testVulnerability.getDescription()).isEqualTo(DEFAULT_DESCRIPTION);
        assertThat(testVulnerability.getReferenceExterne()).isEqualTo(DEFAULT_REFERENCE_EXTERNE);

        // Validate the Vulnerability in Elasticsearch
        verify(mockVulnerabilitySearchRepository, times(1)).save(testVulnerability);
    }

    @Test
    @Transactional
    public void createVulnerabilityWithExistingId() throws Exception {
        int databaseSizeBeforeCreate = vulnerabilityRepository.findAll().size();

        // Create the Vulnerability with an existing ID
        vulnerability.setId(1L);
        VulnerabilityDTO vulnerabilityDTO = vulnerabilityMapper.toDto(vulnerability);

        // An entity with an existing ID cannot be created, so this API call must fail
        restVulnerabilityMockMvc.perform(post("/api/vulnerabilities")
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(vulnerabilityDTO)))
            .andExpect(status().isBadRequest());

        // Validate the Vulnerability in the database
        List<Vulnerability> vulnerabilityList = vulnerabilityRepository.findAll();
        assertThat(vulnerabilityList).hasSize(databaseSizeBeforeCreate);

        // Validate the Vulnerability in Elasticsearch
        verify(mockVulnerabilitySearchRepository, times(0)).save(vulnerability);
    }

    @Test
    @Transactional
    public void getAllVulnerabilities() throws Exception {
        // Initialize the database
        vulnerabilityRepository.saveAndFlush(vulnerability);

        // Get all the vulnerabilityList
        restVulnerabilityMockMvc.perform(get("/api/vulnerabilities?sort=id,desc"))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
            .andExpect(jsonPath("$.[*].id").value(hasItem(vulnerability.getId().intValue())))
            .andExpect(jsonPath("$.[*].nom").value(hasItem(DEFAULT_NOM.toString())))
            .andExpect(jsonPath("$.[*].type").value(hasItem(DEFAULT_TYPE.toString())))
            .andExpect(jsonPath("$.[*].description").value(hasItem(DEFAULT_DESCRIPTION.toString())))
            .andExpect(jsonPath("$.[*].referenceExterne").value(hasItem(DEFAULT_REFERENCE_EXTERNE.toString())));
    }
    

    @Test
    @Transactional
    public void getVulnerability() throws Exception {
        // Initialize the database
        vulnerabilityRepository.saveAndFlush(vulnerability);

        // Get the vulnerability
        restVulnerabilityMockMvc.perform(get("/api/vulnerabilities/{id}", vulnerability.getId()))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
            .andExpect(jsonPath("$.id").value(vulnerability.getId().intValue()))
            .andExpect(jsonPath("$.nom").value(DEFAULT_NOM.toString()))
            .andExpect(jsonPath("$.type").value(DEFAULT_TYPE.toString()))
            .andExpect(jsonPath("$.description").value(DEFAULT_DESCRIPTION.toString()))
            .andExpect(jsonPath("$.referenceExterne").value(DEFAULT_REFERENCE_EXTERNE.toString()));
    }

    @Test
    @Transactional
    public void getAllVulnerabilitiesByNomIsEqualToSomething() throws Exception {
        // Initialize the database
        vulnerabilityRepository.saveAndFlush(vulnerability);

        // Get all the vulnerabilityList where nom equals to DEFAULT_NOM
        defaultVulnerabilityShouldBeFound("nom.equals=" + DEFAULT_NOM);

        // Get all the vulnerabilityList where nom equals to UPDATED_NOM
        defaultVulnerabilityShouldNotBeFound("nom.equals=" + UPDATED_NOM);
    }

    @Test
    @Transactional
    public void getAllVulnerabilitiesByNomIsInShouldWork() throws Exception {
        // Initialize the database
        vulnerabilityRepository.saveAndFlush(vulnerability);

        // Get all the vulnerabilityList where nom in DEFAULT_NOM or UPDATED_NOM
        defaultVulnerabilityShouldBeFound("nom.in=" + DEFAULT_NOM + "," + UPDATED_NOM);

        // Get all the vulnerabilityList where nom equals to UPDATED_NOM
        defaultVulnerabilityShouldNotBeFound("nom.in=" + UPDATED_NOM);
    }

    @Test
    @Transactional
    public void getAllVulnerabilitiesByNomIsNullOrNotNull() throws Exception {
        // Initialize the database
        vulnerabilityRepository.saveAndFlush(vulnerability);

        // Get all the vulnerabilityList where nom is not null
        defaultVulnerabilityShouldBeFound("nom.specified=true");

        // Get all the vulnerabilityList where nom is null
        defaultVulnerabilityShouldNotBeFound("nom.specified=false");
    }

    @Test
    @Transactional
    public void getAllVulnerabilitiesByTypeIsEqualToSomething() throws Exception {
        // Initialize the database
        vulnerabilityRepository.saveAndFlush(vulnerability);

        // Get all the vulnerabilityList where type equals to DEFAULT_TYPE
        defaultVulnerabilityShouldBeFound("type.equals=" + DEFAULT_TYPE);

        // Get all the vulnerabilityList where type equals to UPDATED_TYPE
        defaultVulnerabilityShouldNotBeFound("type.equals=" + UPDATED_TYPE);
    }

    @Test
    @Transactional
    public void getAllVulnerabilitiesByTypeIsInShouldWork() throws Exception {
        // Initialize the database
        vulnerabilityRepository.saveAndFlush(vulnerability);

        // Get all the vulnerabilityList where type in DEFAULT_TYPE or UPDATED_TYPE
        defaultVulnerabilityShouldBeFound("type.in=" + DEFAULT_TYPE + "," + UPDATED_TYPE);

        // Get all the vulnerabilityList where type equals to UPDATED_TYPE
        defaultVulnerabilityShouldNotBeFound("type.in=" + UPDATED_TYPE);
    }

    @Test
    @Transactional
    public void getAllVulnerabilitiesByTypeIsNullOrNotNull() throws Exception {
        // Initialize the database
        vulnerabilityRepository.saveAndFlush(vulnerability);

        // Get all the vulnerabilityList where type is not null
        defaultVulnerabilityShouldBeFound("type.specified=true");

        // Get all the vulnerabilityList where type is null
        defaultVulnerabilityShouldNotBeFound("type.specified=false");
    }

    @Test
    @Transactional
    public void getAllVulnerabilitiesByDescriptionIsEqualToSomething() throws Exception {
        // Initialize the database
        vulnerabilityRepository.saveAndFlush(vulnerability);

        // Get all the vulnerabilityList where description equals to DEFAULT_DESCRIPTION
        defaultVulnerabilityShouldBeFound("description.equals=" + DEFAULT_DESCRIPTION);

        // Get all the vulnerabilityList where description equals to UPDATED_DESCRIPTION
        defaultVulnerabilityShouldNotBeFound("description.equals=" + UPDATED_DESCRIPTION);
    }

    @Test
    @Transactional
    public void getAllVulnerabilitiesByDescriptionIsInShouldWork() throws Exception {
        // Initialize the database
        vulnerabilityRepository.saveAndFlush(vulnerability);

        // Get all the vulnerabilityList where description in DEFAULT_DESCRIPTION or UPDATED_DESCRIPTION
        defaultVulnerabilityShouldBeFound("description.in=" + DEFAULT_DESCRIPTION + "," + UPDATED_DESCRIPTION);

        // Get all the vulnerabilityList where description equals to UPDATED_DESCRIPTION
        defaultVulnerabilityShouldNotBeFound("description.in=" + UPDATED_DESCRIPTION);
    }

    @Test
    @Transactional
    public void getAllVulnerabilitiesByDescriptionIsNullOrNotNull() throws Exception {
        // Initialize the database
        vulnerabilityRepository.saveAndFlush(vulnerability);

        // Get all the vulnerabilityList where description is not null
        defaultVulnerabilityShouldBeFound("description.specified=true");

        // Get all the vulnerabilityList where description is null
        defaultVulnerabilityShouldNotBeFound("description.specified=false");
    }

    @Test
    @Transactional
    public void getAllVulnerabilitiesByReferenceExterneIsEqualToSomething() throws Exception {
        // Initialize the database
        vulnerabilityRepository.saveAndFlush(vulnerability);

        // Get all the vulnerabilityList where referenceExterne equals to DEFAULT_REFERENCE_EXTERNE
        defaultVulnerabilityShouldBeFound("referenceExterne.equals=" + DEFAULT_REFERENCE_EXTERNE);

        // Get all the vulnerabilityList where referenceExterne equals to UPDATED_REFERENCE_EXTERNE
        defaultVulnerabilityShouldNotBeFound("referenceExterne.equals=" + UPDATED_REFERENCE_EXTERNE);
    }

    @Test
    @Transactional
    public void getAllVulnerabilitiesByReferenceExterneIsInShouldWork() throws Exception {
        // Initialize the database
        vulnerabilityRepository.saveAndFlush(vulnerability);

        // Get all the vulnerabilityList where referenceExterne in DEFAULT_REFERENCE_EXTERNE or UPDATED_REFERENCE_EXTERNE
        defaultVulnerabilityShouldBeFound("referenceExterne.in=" + DEFAULT_REFERENCE_EXTERNE + "," + UPDATED_REFERENCE_EXTERNE);

        // Get all the vulnerabilityList where referenceExterne equals to UPDATED_REFERENCE_EXTERNE
        defaultVulnerabilityShouldNotBeFound("referenceExterne.in=" + UPDATED_REFERENCE_EXTERNE);
    }

    @Test
    @Transactional
    public void getAllVulnerabilitiesByReferenceExterneIsNullOrNotNull() throws Exception {
        // Initialize the database
        vulnerabilityRepository.saveAndFlush(vulnerability);

        // Get all the vulnerabilityList where referenceExterne is not null
        defaultVulnerabilityShouldBeFound("referenceExterne.specified=true");

        // Get all the vulnerabilityList where referenceExterne is null
        defaultVulnerabilityShouldNotBeFound("referenceExterne.specified=false");
    }

    @Test
    @Transactional
    public void getAllVulnerabilitiesByLinkOfIsEqualToSomething() throws Exception {
        // Initialize the database
        NetLink linkOf = NetLinkResourceIntTest.createEntity(em);
        em.persist(linkOf);
        em.flush();
        vulnerability.setLinkOf(linkOf);
        vulnerabilityRepository.saveAndFlush(vulnerability);
        Long linkOfId = linkOf.getId();

        // Get all the vulnerabilityList where linkOf equals to linkOfId
        defaultVulnerabilityShouldBeFound("linkOfId.equals=" + linkOfId);

        // Get all the vulnerabilityList where linkOf equals to linkOfId + 1
        defaultVulnerabilityShouldNotBeFound("linkOfId.equals=" + (linkOfId + 1));
    }


    @Test
    @Transactional
    public void getAllVulnerabilitiesByTargetsVulnerabilityToThreatActorIsEqualToSomething() throws Exception {
        // Initialize the database
        ThreatActor targetsVulnerabilityToThreatActor = ThreatActorResourceIntTest.createEntity(em);
        em.persist(targetsVulnerabilityToThreatActor);
        em.flush();
        vulnerability.setTargetsVulnerabilityToThreatActor(targetsVulnerabilityToThreatActor);
        vulnerabilityRepository.saveAndFlush(vulnerability);
        Long targetsVulnerabilityToThreatActorId = targetsVulnerabilityToThreatActor.getId();

        // Get all the vulnerabilityList where targetsVulnerabilityToThreatActor equals to targetsVulnerabilityToThreatActorId
        defaultVulnerabilityShouldBeFound("targetsVulnerabilityToThreatActorId.equals=" + targetsVulnerabilityToThreatActorId);

        // Get all the vulnerabilityList where targetsVulnerabilityToThreatActor equals to targetsVulnerabilityToThreatActorId + 1
        defaultVulnerabilityShouldNotBeFound("targetsVulnerabilityToThreatActorId.equals=" + (targetsVulnerabilityToThreatActorId + 1));
    }


    @Test
    @Transactional
    public void getAllVulnerabilitiesByTargetsVulnerabilityToToolIsEqualToSomething() throws Exception {
        // Initialize the database
        Tool targetsVulnerabilityToTool = ToolResourceIntTest.createEntity(em);
        em.persist(targetsVulnerabilityToTool);
        em.flush();
        vulnerability.setTargetsVulnerabilityToTool(targetsVulnerabilityToTool);
        vulnerabilityRepository.saveAndFlush(vulnerability);
        Long targetsVulnerabilityToToolId = targetsVulnerabilityToTool.getId();

        // Get all the vulnerabilityList where targetsVulnerabilityToTool equals to targetsVulnerabilityToToolId
        defaultVulnerabilityShouldBeFound("targetsVulnerabilityToToolId.equals=" + targetsVulnerabilityToToolId);

        // Get all the vulnerabilityList where targetsVulnerabilityToTool equals to targetsVulnerabilityToToolId + 1
        defaultVulnerabilityShouldNotBeFound("targetsVulnerabilityToToolId.equals=" + (targetsVulnerabilityToToolId + 1));
    }

    /**
     * Executes the search, and checks that the default entity is returned
     */
    private void defaultVulnerabilityShouldBeFound(String filter) throws Exception {
        restVulnerabilityMockMvc.perform(get("/api/vulnerabilities?sort=id,desc&" + filter))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
            .andExpect(jsonPath("$.[*].id").value(hasItem(vulnerability.getId().intValue())))
            .andExpect(jsonPath("$.[*].nom").value(hasItem(DEFAULT_NOM.toString())))
            .andExpect(jsonPath("$.[*].type").value(hasItem(DEFAULT_TYPE.toString())))
            .andExpect(jsonPath("$.[*].description").value(hasItem(DEFAULT_DESCRIPTION.toString())))
            .andExpect(jsonPath("$.[*].referenceExterne").value(hasItem(DEFAULT_REFERENCE_EXTERNE.toString())));
    }

    /**
     * Executes the search, and checks that the default entity is not returned
     */
    private void defaultVulnerabilityShouldNotBeFound(String filter) throws Exception {
        restVulnerabilityMockMvc.perform(get("/api/vulnerabilities?sort=id,desc&" + filter))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
            .andExpect(jsonPath("$").isArray())
            .andExpect(jsonPath("$").isEmpty());
    }

    @Test
    @Transactional
    public void getNonExistingVulnerability() throws Exception {
        // Get the vulnerability
        restVulnerabilityMockMvc.perform(get("/api/vulnerabilities/{id}", Long.MAX_VALUE))
            .andExpect(status().isNotFound());
    }

    @Test
    @Transactional
    public void updateVulnerability() throws Exception {
        // Initialize the database
        vulnerabilityRepository.saveAndFlush(vulnerability);

        int databaseSizeBeforeUpdate = vulnerabilityRepository.findAll().size();

        // Update the vulnerability
        Vulnerability updatedVulnerability = vulnerabilityRepository.findById(vulnerability.getId()).get();
        // Disconnect from session so that the updates on updatedVulnerability are not directly saved in db
        em.detach(updatedVulnerability);
        updatedVulnerability
            .nom(UPDATED_NOM)
            .type(UPDATED_TYPE)
            .description(UPDATED_DESCRIPTION)
            .referenceExterne(UPDATED_REFERENCE_EXTERNE);
        VulnerabilityDTO vulnerabilityDTO = vulnerabilityMapper.toDto(updatedVulnerability);

        restVulnerabilityMockMvc.perform(put("/api/vulnerabilities")
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(vulnerabilityDTO)))
            .andExpect(status().isOk());

        // Validate the Vulnerability in the database
        List<Vulnerability> vulnerabilityList = vulnerabilityRepository.findAll();
        assertThat(vulnerabilityList).hasSize(databaseSizeBeforeUpdate);
        Vulnerability testVulnerability = vulnerabilityList.get(vulnerabilityList.size() - 1);
        assertThat(testVulnerability.getNom()).isEqualTo(UPDATED_NOM);
        assertThat(testVulnerability.getType()).isEqualTo(UPDATED_TYPE);
        assertThat(testVulnerability.getDescription()).isEqualTo(UPDATED_DESCRIPTION);
        assertThat(testVulnerability.getReferenceExterne()).isEqualTo(UPDATED_REFERENCE_EXTERNE);

        // Validate the Vulnerability in Elasticsearch
        verify(mockVulnerabilitySearchRepository, times(1)).save(testVulnerability);
    }

    @Test
    @Transactional
    public void updateNonExistingVulnerability() throws Exception {
        int databaseSizeBeforeUpdate = vulnerabilityRepository.findAll().size();

        // Create the Vulnerability
        VulnerabilityDTO vulnerabilityDTO = vulnerabilityMapper.toDto(vulnerability);

        // If the entity doesn't have an ID, it will throw BadRequestAlertException 
        restVulnerabilityMockMvc.perform(put("/api/vulnerabilities")
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(vulnerabilityDTO)))
            .andExpect(status().isBadRequest());

        // Validate the Vulnerability in the database
        List<Vulnerability> vulnerabilityList = vulnerabilityRepository.findAll();
        assertThat(vulnerabilityList).hasSize(databaseSizeBeforeUpdate);

        // Validate the Vulnerability in Elasticsearch
        verify(mockVulnerabilitySearchRepository, times(0)).save(vulnerability);
    }

    @Test
    @Transactional
    public void deleteVulnerability() throws Exception {
        // Initialize the database
        vulnerabilityRepository.saveAndFlush(vulnerability);

        int databaseSizeBeforeDelete = vulnerabilityRepository.findAll().size();

        // Get the vulnerability
        restVulnerabilityMockMvc.perform(delete("/api/vulnerabilities/{id}", vulnerability.getId())
            .accept(TestUtil.APPLICATION_JSON_UTF8))
            .andExpect(status().isOk());

        // Validate the database is empty
        List<Vulnerability> vulnerabilityList = vulnerabilityRepository.findAll();
        assertThat(vulnerabilityList).hasSize(databaseSizeBeforeDelete - 1);

        // Validate the Vulnerability in Elasticsearch
        verify(mockVulnerabilitySearchRepository, times(1)).deleteById(vulnerability.getId());
    }

    @Test
    @Transactional
    public void searchVulnerability() throws Exception {
        // Initialize the database
        vulnerabilityRepository.saveAndFlush(vulnerability);
        when(mockVulnerabilitySearchRepository.search(queryStringQuery("id:" + vulnerability.getId()), PageRequest.of(0, 20)))
            .thenReturn(new PageImpl<>(Collections.singletonList(vulnerability), PageRequest.of(0, 1), 1));
        // Search the vulnerability
        restVulnerabilityMockMvc.perform(get("/api/_search/vulnerabilities?query=id:" + vulnerability.getId()))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
            .andExpect(jsonPath("$.[*].id").value(hasItem(vulnerability.getId().intValue())))
            .andExpect(jsonPath("$.[*].nom").value(hasItem(DEFAULT_NOM.toString())))
            .andExpect(jsonPath("$.[*].type").value(hasItem(DEFAULT_TYPE.toString())))
            .andExpect(jsonPath("$.[*].description").value(hasItem(DEFAULT_DESCRIPTION.toString())))
            .andExpect(jsonPath("$.[*].referenceExterne").value(hasItem(DEFAULT_REFERENCE_EXTERNE.toString())));
    }

    @Test
    @Transactional
    public void equalsVerifier() throws Exception {
        TestUtil.equalsVerifier(Vulnerability.class);
        Vulnerability vulnerability1 = new Vulnerability();
        vulnerability1.setId(1L);
        Vulnerability vulnerability2 = new Vulnerability();
        vulnerability2.setId(vulnerability1.getId());
        assertThat(vulnerability1).isEqualTo(vulnerability2);
        vulnerability2.setId(2L);
        assertThat(vulnerability1).isNotEqualTo(vulnerability2);
        vulnerability1.setId(null);
        assertThat(vulnerability1).isNotEqualTo(vulnerability2);
    }

    @Test
    @Transactional
    public void dtoEqualsVerifier() throws Exception {
        TestUtil.equalsVerifier(VulnerabilityDTO.class);
        VulnerabilityDTO vulnerabilityDTO1 = new VulnerabilityDTO();
        vulnerabilityDTO1.setId(1L);
        VulnerabilityDTO vulnerabilityDTO2 = new VulnerabilityDTO();
        assertThat(vulnerabilityDTO1).isNotEqualTo(vulnerabilityDTO2);
        vulnerabilityDTO2.setId(vulnerabilityDTO1.getId());
        assertThat(vulnerabilityDTO1).isEqualTo(vulnerabilityDTO2);
        vulnerabilityDTO2.setId(2L);
        assertThat(vulnerabilityDTO1).isNotEqualTo(vulnerabilityDTO2);
        vulnerabilityDTO1.setId(null);
        assertThat(vulnerabilityDTO1).isNotEqualTo(vulnerabilityDTO2);
    }

    @Test
    @Transactional
    public void testEntityFromId() {
        assertThat(vulnerabilityMapper.fromId(42L).getId()).isEqualTo(42);
        assertThat(vulnerabilityMapper.fromId(null)).isNull();
    }
}
